// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package moustacios

import (
	"context"
	"database/sql"
)

const deleteComment = `-- name: DeleteComment :execresult
DELETE FROM comments 
WHERE id = ?
`

func (q *Queries) DeleteComment(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteComment, id)
}

const flagBotComment = `-- name: FlagBotComment :execresult
UPDATE comments
SET bot_probability = ?
WHERE id = ?
`

type FlagBotCommentParams struct {
	BotProbability sql.NullInt16
	ID             int64
}

func (q *Queries) FlagBotComment(ctx context.Context, arg FlagBotCommentParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, flagBotComment, arg.BotProbability, arg.ID)
}

const getComment = `-- name: GetComment :one

SELECT id, email, comment_text, bot_probability FROM comments 
WHERE id = ? LIMIT 1
`

// ~/Workspace/sqlcdemo/queries.sql
func (q *Queries) GetComment(ctx context.Context, id int64) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CommentText,
		&i.BotProbability,
	)
	return i, err
}

const listComments = `-- name: ListComments :many
SELECT id, email, comment_text, bot_probability FROM comments 
ORDER BY bot_probability DESC
`

func (q *Queries) ListComments(ctx context.Context) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, listComments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.CommentText,
			&i.BotProbability,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const purgeBotComments = `-- name: PurgeBotComments :execresult
DELETE FROM comments 
WHERE bot_probability > ?
`

func (q *Queries) PurgeBotComments(ctx context.Context, botProbability sql.NullInt16) (sql.Result, error) {
	return q.db.ExecContext(ctx, purgeBotComments, botProbability)
}

const saveComment = `-- name: SaveComment :execresult
INSERT INTO comments (
  email, comment_text
) VALUES (
  ?, ?
)
`

type SaveCommentParams struct {
	Email       string
	CommentText string
}

func (q *Queries) SaveComment(ctx context.Context, arg SaveCommentParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, saveComment, arg.Email, arg.CommentText)
}
